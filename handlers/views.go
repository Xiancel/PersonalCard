package handlers

import (
	"fmt"
	"net/http"
	mod "personalcard/module"
	"strconv"
)

// —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –ø—Ä–µ–¥–º–∞—Ç–∞ –∑–∞ –π–æ–≥–æ ID
func searchById(inputId int) mod.Items {
	for _, item := range mod.ItemList {
		if item.Id == inputId {
			return item
		}
	}
	return mod.Items{}
}

// —Ñ—É–Ω–∫—Ü—ñ—è/–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–∞ –π–æ–≥–æ ID
func ViewsHandler(w http.ResponseWriter, r *http.Request) {
	// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞
	if r.Method == "GET" {
		// –∑–∞–ø—Ä–æ—Å ID —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
		checkId := r.URL.Query().Get("id")

		// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∫–∞–∑–∞–Ω–Ω—è ID
		if checkId == "" {
			http.Error(w, "ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ", http.StatusBadRequest)
			fmt.Println("‚ùå –ü–û–ú–ò–õ–ö–ê: ID –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π")
			return
		}

		// –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è id –∑ string –≤ int
		inputId, err := strconv.Atoi(checkId)
		// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É
		if err != nil {
			http.Error(w, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID", http.StatusBadRequest)
			return
		}

		// –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ—à—É–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞
		item := searchById(inputId)
		// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ —Ç–∞–∫–∏–º ID
		if item.Id == 0 {
			http.Error(w, "Not Found", http.StatusBadRequest)
			fmt.Printf("‚ùå –ü–û–ú–ò–õ–ö–ê: –ü—Ä–µ–¥–º–µ—Ç –∑ ID=%d –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n", inputId)
			return
		}

		// html —Ä–æ–∑–º—ñ—Ç–∫–∞
		html := fmt.Sprintf(`
		<!DOCTYPE html>
		<html>
		<head>
			<title>–ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–µ–¥–º–µ—Ç—É</title>
			<style>
				body { font-family: sans-serif; padding: 20px; }
				ul { list-style-type: none; padding: 0; }
				li { margin-bottom: 8px; }
			</style>
		</head>
		<body>
			<h1>–ü–ï–†–ï–ì–õ–Ø–î –ü–†–ï–î–ú–ï–¢–£</h1>
			<ul>
				<li><strong>ID:</strong> %d</li>
				<li><strong>–ù–∞–∑–≤–∞:</strong> %s</li>
				<li><strong>–û—Ü—ñ–Ω–∫–∞:</strong> %d/12</li>
				<li><strong>–ù–æ—Ç–∞—Ç–∫–∏:</strong> %s</li>
			</ul>
		</body>
		</html>
		`, item.Id, item.Name, item.Grade, item.Notes)

		// —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è html —Å—Ç–æ—Ä—ñ–Ω–∫–∏
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		w.Write([]byte(html))

		// –≤–∏–≤—ñ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
		fmt.Println("\nüîç === –ü–ï–†–ï–ì–õ–Ø–î –ü–†–ï–î–ú–ï–¢–£ ===")
		fmt.Printf("\nID: %d\n–ù–∞–∑–≤–∞: %s\n–û—Ü—ñ–Ω–∫–∞: %d/12\n–ù–æ—Ç–∞—Ç–∫–∏: %s", item.Id, item.Name, item.Grade, item.Notes)

	} else {
		w.WriteHeader(http.StatusMethodNotAllowed)
		fmt.Fprintf(w, "Sorry this method no support")
	}
}
