package handlers

import (
	"fmt"
	"net/http"
	mod "personalcard/module"
)

// —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ–æ–≥–æ –±–∞–ª—É
func avgGrade() float64 {
	var ball float64
	for _, n := range mod.ItemList {
		ball += float64(n.Grade)
	}

	var avg float64 = ball / float64(len(mod.ItemList))

	return avg
}

// —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—à–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
func bestStats() (int, string) {
	// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
	if len(mod.ItemList) == 0 {
		return 0, " "
	}
	bestGrade := mod.ItemList[0].Grade
	bestName := mod.ItemList[0].Name

	// –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—à–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
	for _, n := range mod.ItemList[1:] {
		if n.Grade > bestGrade {
			bestGrade = n.Grade
			bestName = n.Name
		}
	}
	return bestGrade, bestName
}

// —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–≥—ñ—Ä—à–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
func worstStats() (int, string) {
	// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
	if len(mod.ItemList) == 0 {
		return 0, " "
	}
	worstGrade := mod.ItemList[0].Grade
	worstName := mod.ItemList[0].Name

	// –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–≥—ñ—Ä—à–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
	for _, n := range mod.ItemList[1:] {
		if n.Grade < worstGrade {
			worstGrade = n.Grade
			worstName = n.Name
		}
	}
	return worstGrade, worstName
}

// —Ñ—É–Ω–∫—Ü—ñ—è/—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–≤–æ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
func StatsHandler(w http.ResponseWriter, r *http.Request) {
	// –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
	bestGrade, bestName := bestStats()
	worstGrade, worstName := worstStats()
	avg := avgGrade()
	total := len(mod.ItemList)
	// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞
	if r.Method == "GET" {
		// –≤–∏–≤—ñ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
		fmt.Println("\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ê–í–ß–ê–ù–ù–Ø ===")
		fmt.Printf("–í—Å—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤: %d\n", total)
		fmt.Printf("–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª: %.2f/12\n", avg)
		fmt.Printf("–ù–∞–π–∫—Ä–∞—â–∞ –æ—Ü—ñ–Ω–∫–∞: %d/12 (%s)\n", bestGrade, bestName)
		fmt.Printf("–ù–∞–π–≥—ñ—Ä—à–∞ –æ—Ü—ñ–Ω–∫–∞: %d/12 (%s)\n", worstGrade, worstName)

		// html —Ä–æ–∑–º—ñ—Ç–∫–∞
		html := fmt.Sprintf(`
		<!DOCTYPE html>
		<html>
		<head>
			<title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è</title>
			<style>
				body { font-family: sans-serif; padding: 20px; }
				ul { list-style-type: none; padding: 0; }
				li { margin-bottom: 8px; }
			</style>
		</head>
		<body>
			<h1>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ê–í–ß–ê–ù–ù–Ø</h1>
			<ul>
				<li><strong>–í—Å—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:</strong> %d</li>
				<li><strong>–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª:</strong> %.2f/12</li>
				<li><strong>–ù–∞–π–∫—Ä–∞—â–∞ –æ—Ü—ñ–Ω–∫–∞:</strong> %d/12 (%s)</li>
				<li><strong>–ù–∞–π–≥—ñ—Ä—à–∞ –æ—Ü—ñ–Ω–∫–∞:</strong> %d/12 (%s)</li>
			</ul>
		</body>
		</html>
		`, total, avg, bestGrade, bestName, worstGrade, worstName)

		// —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è html —Å—Ç–æ—Ä—ñ–Ω–∫–∏
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		w.Write([]byte(html))
	} else {
		w.WriteHeader(http.StatusMethodNotAllowed)
		fmt.Fprintf(w, "Sorry this method no support")
	}
}
